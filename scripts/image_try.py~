#!/usr/bin/env python
import roslib
import sys
import rospy
import cv2
from std_msgs.msg import String
from sensor_msgs.msg import Image,CameraInfo
from cv_bridge import CvBridge, CvBridgeError
import message_filters
import numpy as np

globvar = 0

class image_converter:

  def __init__(self):
    self.img = None
    cv2.namedWindow("Image window", 1)
    cv2.namedWindow("Depth window", 1)
    self.bridge = CvBridge()

    self.image_sub = message_filters.Subscriber("/camera/rgb/image_rect_color",Image)
    self.depth_sub = message_filters.Subscriber("/camera/depth/image_rect_raw",Image)
    
    self.ts = message_filters.ApproximateTimeSynchronizer([self.image_sub, self.depth_sub],10,0.5)
    self.ts.registerCallback(self.callback)

  def callback(self,data,depth):
    try:
      cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
      cv_depth = self.bridge.imgmsg_to_cv2(depth,"passthrough")
    except CvBridgeError, e:
      print e

    (rows,cols,channels) = cv_image.shape
    depth_array = np.array(cv_depth, dtype=np.float32)
    cv2.normalize(depth_array, depth_array, 0, 1, cv2.NORM_MINMAX)
    #if cols > 60 and rows > 60 :
    #  cv2.circle(cv_image, (50,50), 10, 255)
    
    global globvar
    globvar = globvar + 1
    #cv2.imwrite("/home/robotics/catkin_ws/src/beginner_tutorials/scripts/sequence3/%d.jpg" %globvar, cv_image)
 
    point_grasp = (362,284)
    point_grasp_x = (355,291)
    point_grasp_z = (364,237)
    cv2.circle(cv_image, point_grasp, 3, (255,0,0), 2)

    print depth_array[362,284]
    cv2.imshow("Image window", cv_image)
    cv2.imshow("Depth window", depth_array)
    cv2.waitKey(3)


def main(args):
  ic = image_converter()
  rospy.init_node('image_converter', anonymous=True)
  try:
    rospy.spin()
  except KeyboardInterrupt:
    print "Shutting down"
  cv2.destroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)
